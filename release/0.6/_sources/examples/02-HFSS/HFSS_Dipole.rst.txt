
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\02-HFSS\HFSS_Dipole.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-HFSS_HFSS_Dipole.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-HFSS_HFSS_Dipole.py:


HFSS: dipole antenna
--------------------
This example shows how you can use PyAEDT to create a dipole antenna in HFSS and postprocess results.

.. GENERATED FROM PYTHON SOURCE LINES 8-11

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: default


    import os
    import pyaedt

    project_name = pyaedt.generate_unique_project_name(project_name="dipole")









.. GENERATED FROM PYTHON SOURCE LINES 19-24

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. ``PYAEDT_NON_GRAPHICAL`` is needed to generate
documentation only.
You can set ``non_graphical`` either to ``True`` or ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: default


    non_graphical = os.getenv("PYAEDT_NON_GRAPHICAL", "False").lower() in ("true", "1", "t")








.. GENERATED FROM PYTHON SOURCE LINES 28-31

Launch AEDT
~~~~~~~~~~~
Launch AEDT 2022 R2 in graphical mode.

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: default


    d = pyaedt.launch_desktop("2022.2", non_graphical=non_graphical, new_desktop_session=True)








.. GENERATED FROM PYTHON SOURCE LINES 35-38

Launch HFSS
~~~~~~~~~~~
Launch HFSS 2022 R2 in graphical mode.

.. GENERATED FROM PYTHON SOURCE LINES 38-41

.. code-block:: default


    hfss = pyaedt.Hfss(projectname=project_name, solution_type="Modal")








.. GENERATED FROM PYTHON SOURCE LINES 42-45

Define variable
~~~~~~~~~~~~~~~
Define a variable for the dipole length.

.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. code-block:: default


    hfss["l_dipole"] = "13.5cm"








.. GENERATED FROM PYTHON SOURCE LINES 49-54

Get 3D component from system library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get a 3D component from the ``syslib`` directory. For this example to run
correctly, you must get all geometry parameters of the 3D component or, in
case of an encrypted 3D component, create a dictionary of the parameters.

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: default


    compfile = hfss.components3d["Dipole_Antenna_DM"]
    geometryparams = hfss.get_components3d_vars("Dipole_Antenna_DM")
    geometryparams["dipole_length"] = "l_dipole"
    hfss.modeler.insert_3d_component(compfile, geometryparams)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modeler.cad.components_3d.UserDefinedComponent object at 0x00000281204460D0>



.. GENERATED FROM PYTHON SOURCE LINES 61-64

Create boundaries
~~~~~~~~~~~~~~~~~
Create boundaries. A region with openings is needed to run the analysis.

.. GENERATED FROM PYTHON SOURCE LINES 64-67

.. code-block:: default


    hfss.create_open_region(Frequency="1GHz")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 68-71

Plot model
~~~~~~~~~~
Plot the model.

.. GENERATED FROM PYTHON SOURCE LINES 71-80

.. code-block:: default


    my_plot = hfss.plot(show=False, plot_air_objects=False)
    my_plot.show_axes = False
    my_plot.show_grid = False
    my_plot.isometric_view = False
    my_plot.plot(
        os.path.join(hfss.working_directory, "Image.jpg"),
    )




.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_001.png
   :alt: HFSS Dipole
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 81-84

Create setup
~~~~~~~~~~~~
Create a setup with a sweep to run the simulation.

.. GENERATED FROM PYTHON SOURCE LINES 84-101

.. code-block:: default


    setup = hfss.create_setup("MySetup")
    setup.props["Frequency"] = "1GHz"
    setup.props["MaximumPasses"] = 1
    hfss.create_linear_count_sweep(
        setupname=setup.name,
        unit="GHz",
        freqstart=0.5,
        freqstop=1.5,
        num_of_freq_points=251,
        sweepname="sweep1",
        sweep_type="Interpolating",
        interpolation_tol=3,
        interpolation_max_solutions=255,
        save_fields=False,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.SetupTemplates.SweepHFSS object at 0x000002817DE18790>



.. GENERATED FROM PYTHON SOURCE LINES 102-105

Save and run simulation
~~~~~~~~~~~~~~~~~~~~~~~
Save and run the simulation.

.. GENERATED FROM PYTHON SOURCE LINES 105-108

.. code-block:: default


    hfss.analyze_setup("MySetup")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 109-112

Create scattering plot and far fields report
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a scattering plot and a far fields report.

.. GENERATED FROM PYTHON SOURCE LINES 112-127

.. code-block:: default


    hfss.create_scattering("MyScattering")
    variations = hfss.available_variations.nominal_w_values_dict
    variations["Freq"] = ["1GHz"]
    variations["Theta"] = ["All"]
    variations["Phi"] = ["All"]
    hfss.post.create_report(
        "db(GainTotal)",
        hfss.nominal_adaptive,
        variations,
        primary_sweep_variable="Theta",
        context="3D",
        report_category="Far Fields",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.report_templates.FarField object at 0x000002817DE140D0>



.. GENERATED FROM PYTHON SOURCE LINES 128-132

Create far fields report using report objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a far fields report using the ``report_by_category.far field`` method,
which gives you more freedom.

.. GENERATED FROM PYTHON SOURCE LINES 132-138

.. code-block:: default


    new_report = hfss.post.reports_by_category.far_field("db(RealizedGainTotal)", hfss.nominal_adaptive, "3D")
    new_report.variations = variations
    new_report.primary_sweep = "Theta"
    new_report.create("Realized2D")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 139-143

Generate multiple plots
~~~~~~~~~~~~~~~~~~~~~~~
Generate multiple plots using the object ``new_report``. This code generates
2D and 3D polar plots.

.. GENERATED FROM PYTHON SOURCE LINES 143-148

.. code-block:: default


    new_report.report_type = "3D Polar Plot"
    new_report.secondary_sweep = "Phi"
    new_report.create("Realized3D")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 149-153

Get solution data
~~~~~~~~~~~~~~~~~
Get solution data using the object ``new_report``` and postprocess or plot the
data outside of AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 153-157

.. code-block:: default


    solution_data = new_report.get_solution_data()
    solution_data.plot()




.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_002.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 158-164

Generate far field plot
~~~~~~~~~~~~~~~~~~~~~~~
Generate a far field plot by creating a postprocessing variable and assigning
it to a new coordinate system. You can use the ``post`` prefix to create a
postprocessing variable directly from a setter, or you can use the ``set_variable``
method with an arbitrary name.

.. GENERATED FROM PYTHON SOURCE LINES 164-170

.. code-block:: default


    hfss["post_x"] = 2
    hfss.variable_manager.set_variable("y_post", 1, postprocessing=True)
    hfss.modeler.create_coordinate_system(["post_x", "y_post", 0], name="CS_Post")
    hfss.insert_infinite_sphere(custom_coordinate_system="CS_Post", name="Sphere_Custom")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyaedt.modules.Boundary.FarFieldSetup object at 0x0000028120039970>



.. GENERATED FROM PYTHON SOURCE LINES 171-175

Get solution data
~~~~~~~~~~~~~~~~~
Get solution data. You can use this code to generate the same plot outside
of AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 175-198

.. code-block:: default


    new_report = hfss.post.reports_by_category.far_field("GainTotal", hfss.nominal_adaptive, "3D")
    new_report.primary_sweep = "Theta"
    new_report.far_field_sphere = "3D"
    solutions = new_report.get_solution_data()
    # solutions = hfss.post.get_solution_data(
    #     "GainTotal",
    #     hfss.nominal_adaptive,
    #     variations,
    #     primary_sweep_variable="Theta",
    #     context="3D",
    #     report_category="Far Fields",
    # )
    #
    # solutions_custom = hfss.post.get_solution_data(
    #     "GainTotal",
    #     hfss.nominal_adaptive,
    #     variations,
    #     primary_sweep_variable="Theta",
    #     context="Sphere_Custom",
    #     report_category="Far Fields",
    # )








.. GENERATED FROM PYTHON SOURCE LINES 199-202

Generate 3D plot using Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate a 3D plot using Matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 202-205

.. code-block:: default


    solutions.plot_3d()




.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_003.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 206-209

Generate 3D far fields plot using Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate a far fields plot using Matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 209-214

.. code-block:: default


    new_report.far_field_sphere = "Sphere_Custom"
    solutions_custom = new_report.get_solution_data()
    solutions_custom.plot_3d()




.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_004.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 215-219

Generate 2D plot using Matplotlib
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate a 2D plot using Matplotlib where you specify whether it is a polar
plot or a rectangular plot.

.. GENERATED FROM PYTHON SOURCE LINES 219-222

.. code-block:: default


    solutions.plot(math_formula="db20", is_polar=True)




.. image-sg:: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_005.png
   :alt: Simulation Results Plot
   :srcset: /examples/02-HFSS/images/sphx_glr_HFSS_Dipole_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 2000x1000 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 223-228

Close AEDT
~~~~~~~~~~
After the simulation completes, you can close AEDT or release it using the
:func:`pyaedt.Desktop.release_desktop` method.
All methods provide for saving the project before closing.

.. GENERATED FROM PYTHON SOURCE LINES 228-230

.. code-block:: default


    d.release_desktop()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.611 seconds)


.. _sphx_glr_download_examples_02-HFSS_HFSS_Dipole.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: HFSS_Dipole.py <HFSS_Dipole.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: HFSS_Dipole.ipynb <HFSS_Dipole.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
